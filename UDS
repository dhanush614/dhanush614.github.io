import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;

import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class idiUdsReport {

	public static void main(String[] args) throws IOException {

		StringBuilder sb = new StringBuilder();
		List lst = new ArrayList<>();
		HashMap<Integer, Integer> map = new HashMap<>();
		int value = 1;
		int l = 0;
		int l2 = 0;
		List loglist = new ArrayList();
		List dblist = new ArrayList();
		Set logset = new HashSet<Object>();
		List result = new ArrayList();
		List value1 = new ArrayList();
		List value2 = new ArrayList();
		try (BufferedReader br = Files.newBufferedReader(Paths.get("D:\\IDI\\IDIUDS.txt"))) {
			String line;
			while ((line = br.readLine()) != null) {
				sb.append(line).append("\n");
				String mapsplit[] = line.split(",");
				String split[] = mapsplit[0].split(":");
				lst.add(Integer.parseInt(split[1]));
			}
			System.out.println(lst);
			Set<Object> unique = new HashSet<Object>(lst);
			for (Object key : unique) {
				l = Collections.frequency(lst, key);
				System.out.println(key + " ::  " + l);
				map.put((Integer) key, l);
				// System.out.println("Value from map is" +map.get(key));
			}

		} catch (IOException e) {
			System.err.format("IOException: %s%n", e);
		}

		List lst1 = readExcel();
		System.out.println(lst1);
		if (!(lst.equals(lst1))) {
			System.out.println();

		}
		System.out.println("Db Data sheet");
		Map<Integer, Integer> map1 = new HashMap();
		Set<Object> unique1 = new HashSet<Object>(lst1);
		for (Object key1 : unique1) {
			System.out.println(key1 + " ::  " + Collections.frequency(lst1, key1));
			l2 = Collections.frequency(lst1, key1);
			map1.put((Integer) key1, l2);

		}
		if (map.equals(map1)) {
			System.out.println("Both the maps are equal");
		}

		else {
			for (Map.Entry<Integer, Integer> maps : map.entrySet()) {
				for (Map.Entry<Integer, Integer> mapie : map1.entrySet()) {
					if (maps.getKey().equals(mapie.getKey())) {
						if (!(maps.getValue().equals(mapie.getValue()))) {
							value1.add(maps.getKey());
							value2.add(maps.getValue());
							value2.add(mapie.getValue());
						}
					}

				}
			}
		}
		for (int j = 0; j < value1.size(); j++) {
			for (int i = 0; i < lst.size(); i++) {
				if (lst.get(i).equals(value1.get(j))) {
					loglist.add(i);
				}
			}
		}
		System.out.println("DB Duplicate values");
		for (int j = 0; j < value1.size(); j++) {
			for (int i = 0; i < lst1.size(); i++) {
				if (lst1.get(i).equals(value1.get(j))) {
					result.add(i + 1);
				}
			}
		}
		XSSFWorkbook workbook = new XSSFWorkbook();
		XSSFSheet spreadsheet = workbook.createSheet("UDSReport");
		Map<Integer, Object[]> idiinfo = new TreeMap<Integer, Object[]>();
		idiinfo.put(1, new Object[] { "Claim Number", "UDS count", "CM Count", "Count Difference", "UDS Timestamps" });
		XSSFRow row1;
		for (int i = 0; i < loglist.size(); i++) {
			String lines = Files.readAllLines(Paths.get("D:\\IDI\\IDIUDS.txt")).get((int) loglist.get(i));
			String linesplit[] = lines.split(",", 3);
			String claimsplit[] = linesplit[0].split(":");
			String datesplit[] = linesplit[1].split(":");
			int val = i + 2;
			idiinfo.put(val,
					new Object[] { Integer.parseInt(claimsplit[1]), map.get(Integer.parseInt(claimsplit[1])),
							map1.get(Integer.parseInt(claimsplit[1])),
							map.get(Integer.parseInt(claimsplit[1])) - map1.get(Integer.parseInt(claimsplit[1])),
							datesplit[1] });
			System.out.println(linesplit[0] + " ," + linesplit[1]);
		}
		
		
		Set<Integer> keyid = idiinfo.keySet();
		int rowid = 0;
		for (Integer key : keyid) {
			row1 = spreadsheet.createRow(rowid++);
			Object[] objectArr = idiinfo.get(key);
			int cellid = 0;
			for (Object obj : objectArr) {
					Cell cell = row1.createCell(cellid++);
					cell.setCellValue(obj.toString());
				}
		}
		FileOutputStream out = new FileOutputStream(new File("D:\\IDI\\UDSReport.xlsx"));

		workbook.write(out);
		out.close();
		/*
		 * FileInputStream fis=new FileInputStream(new File(
		 * "D:\\IDI\\report Doc.xlsx")); XSSFWorkbook work = new
		 * XSSFWorkbook(fis); Map < Integer, Object[] > idiinfo1 = new TreeMap <
		 * Integer, Object[] >(); idiinfo1.put(1,new Object[]{ "Claim Number"
		 * ,"DateCreated","count"}); XSSFSheet hssfSheet = work.getSheetAt(0);
		 * for(int i=0;i<result.size();i++){ int val=i+2; XSSFCell row =
		 * hssfSheet.getRow((int) result.get(i)).getCell(0); String claimnumber
		 * = row.getRawValue().toString(); //String
		 * dateCreated=row.getRawValue().toString(); idiinfo.put(val,new
		 * Object[]{ claimnumber,
		 * row.getRawValue().toString(),map1.get(claimnumber)}); Set<Integer>
		 * keyid1 = idiinfo.keySet(); int rowid1 = 0; for (Integer key : keyid1)
		 * { row1 = spreadsheet.createRow(rowid1++); Object [] objectArr =
		 * idiinfo.get(key); int cellid = 0;
		 * 
		 * for (Object obj : objectArr){ Cell cell = row1.createCell(cellid++);
		 * cell.setCellValue((String) obj); } } FileOutputStream out1 = new
		 * FileOutputStream( new File("D:\\IDI\\UDSReport.xlsx"));
		 * 
		 * workbook.write(out1); out.close(); }
		 */

	}

	public static List readExcel() throws IOException {
		final String FILE_NAME = "D:\\IDI\\report Doc.xlsx";
		FileInputStream excelFile = new FileInputStream(new File(FILE_NAME));
		Workbook workbook = new XSSFWorkbook(excelFile);
		org.apache.poi.ss.usermodel.Sheet datatypeSheet = workbook.getSheetAt(0);
		Iterator iterator = datatypeSheet.iterator();
		List lst = new ArrayList();
		while (iterator.hasNext()) {
			Row currentrow = (Row) iterator.next();
			if (currentrow.getRowNum() > 0) {
				Iterator<Cell> cellIterator = currentrow.iterator();
				if (cellIterator.hasNext()) {
					Cell currentCell = cellIterator.next();
					if (currentCell.getColumnIndex() == 0) {
						if (currentCell.getCellType() == CellType.STRING) {
							// System.out.println(currentCell.getStringCellValue());
							lst.add(currentCell.getStringCellValue());
						} else if (currentCell.getCellType() == CellType.NUMERIC) {
							// System.out.println((int)Math.round(currentCell.getNumericCellValue()));
							int values = (int) Math.round(currentCell.getNumericCellValue());
							// System.out.println(values);
							lst.add(values);

						}

					}
				}
			}
		}

		return lst;
	}

}
